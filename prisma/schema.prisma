// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt   @id @default(autoincrement())
  name         String   @db.VarChar(128)
  nickname     String   @db.VarChar(128)
  // gender        String   @db.VarChar(10)
  // birthdate     DateTime @db.Date
  profileImage String?  @map("profile_image") @db.VarChar(512)
  // phoneNumber   String?  @map("phone_number") @db.VarChar(15)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  OAuthUser OAuthUser[]

  @@map("user")
}

model OAuthUser {
  oauthProvider String   @map("oauth_provider") @db.VarChar(30)
  oauthId       String   @map("oauth_id") @db.VarChar(100)
  userId        BigInt   @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([oauthProvider, oauthId])
  @@map("oauth_user")
}

model Team {
  id        BigInt   @id @default(autoincrement())
  name      String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("team")
}

model TeamMember {
  teamId    BigInt   @map("team_id")
  userId    BigInt   @map("user_id")
  role      String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@id([teamId, userId])
  @@index([teamId], name: "idx_team_id")
  @@index([userId], name: "idx_user_id")
  @@map("team_member")
}

model RidingRecord {
  id          BigInt               @id @default(autoincrement())
  userId      BigInt?              @map("user_id")
  teamId      BigInt?              @map("team_id")
  distance    Float
  duration    Int
  startPos    Unsupported("POINT") @map("start_pos")
  stopOverPos Unsupported("POINT") @map("stop_over_pos")
  endPos      Unsupported("POINT") @map("end_pos")
  createdAt   DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime             @default(now()) @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_user_id")
  @@map("riding_record")
}

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @unique @map("user_id")
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@index([userId], name: "idx_user_id")
  @@map("refresh_token")
}

model S3UploadedFiles {
  id        BigInt   @id @default(autoincrement())
  domain    String   @db.VarChar(50) // 업로드된 파일이 속한 도메인 (예: 'events', 'community')
  kind      String   @db.VarChar(20) // 파일 종류: 'image' | 'video'
  key       String   @unique @db.VarChar(500) // S3 object key
  url       String   @db.VarChar(1024) // CDN 공개 URL
  mimeType  String   @map("mime_type") @db.VarChar(100) // ex. image/jpeg
  size      Int? // 파일 크기 (byte 단위)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("s3_uploaded_files")
}
