// prisma generate --schema=prisma/mysql/schema.prisma
// prisma db push --schema=prisma/mysql/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../../src/generated/prisma/mysql"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_MYSQL")
}

model User {
  id                  BigInt   @id @default(autoincrement())
  name                String   @db.VarChar(128)
  nickname            String   @db.VarChar(128)
  oneLineIntroduction String?  @map("one_line_introduction") @db.VarChar(128)
  ribuddyId           String   @unique() @map("ribuddy_id")
  // gender        String   @db.VarChar(10)
  // birthdate     DateTime @db.Date
  profileImage        String?  @map("profile_image") @db.VarChar(512)
  // phoneNumber   String?  @map("phone_number") @db.VarChar(15)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  oAuthUser  OAuthUser[]
  teamMember TeamMember[]

  sentFriendRequests     Friend[] @relation("FriendRequestSender")
  receivedFriendRequests Friend[] @relation("FriendRequestReceiver")

  @@map("user")
}

model Friend {
  fromUserId BigInt
  toUserId   BigInt
  isFavorite Boolean @default(false) @map("is_favorite")

  fromUser User @relation("FriendRequestSender", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUser   User @relation("FriendRequestReceiver", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@id([fromUserId, toUserId])
  @@map("friend")
}

model OAuthUser {
  oauthProvider String   @map("oauth_provider") @db.VarChar(30)
  oauthId       String   @map("oauth_id") @db.VarChar(100)
  userId        BigInt   @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([oauthProvider, oauthId])
  @@map("oauth_user")
}

model Team {
  id          BigInt  @id @default(autoincrement())
  name        String  @db.VarChar(20)
  description String? @db.VarChar(255)
  isCrew      Boolean @default(false) @map("is_crew")
  isDeleted   Boolean @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  members  TeamMember[]
  joinCode TeamJoinCode[]

  @@map("team")
}

model TeamMember {
  teamId BigInt @map("team_id")
  userId BigInt @map("user_id")

  isAdmin         Boolean @default(false) @map("is_admin")
  isCurrentMember Boolean @default(true) @map("is_member")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([teamId, userId])
  @@index([teamId], name: "idx_team_id")
  @@index([userId], name: "idx_user_id")
  @@map("team_member")
}

model TeamJoinCode {
  teamId    BigInt   @map("team_id")
  code      String   @db.VarChar(10)
  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([teamId, code])
  @@map("team_join_code")
}

model S3UploadedFiles {
  id        BigInt   @id @default(autoincrement())
  domain    String   @db.VarChar(50) // 업로드된 파일이 속한 도메인 (예: 'events', 'community')
  kind      String   @db.VarChar(20) // 파일 종류: 'image' | 'video'
  key       String   @unique @db.VarChar(500) // S3 object key
  url       String   @db.VarChar(1024) // CDN 공개 URL
  mimeType  String   @map("mime_type") @db.VarChar(100) // ex. image/jpeg
  size      Int? // 파일 크기 (byte 단위)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("s3_uploaded_files")
}

enum RidingType {
  SOLO
  TEAM
}
