// prisma generate --schema=prisma/mongodb/schema.prisma
// prisma db push --schema=prisma/mongodb/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../../src/generated/prisma/mongodb"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_MONGODB")
}

type GeoPoint {
  type        String // Point로 고정
  coordinates Float[] // [lon, lat, ele?]
  timestamp   DateTime?
  name        String? // 위치 이름 (예: "서울역")
}

model RidingRecord {
  id              String             @default(auto()) @id @map("_id") @db.ObjectId
  route           GeoPoint[] // 사용자한테 위치 받을 때 마다 여기에 집어넣어야 함
  recordOwnerId   String             @map("record_owner_id")
  participants    String[] // 참여자 ID 목록
  teamId          String?            @map("team_id") // 팀 라이딩을 했을 경우 팀 라이딩에 대한 기록을 담음
  // 출발지, 경유지, 도착지 "이름" 만을 저장하는 배열
  departToArrival String[]           @map("depart_to_arrival")
  status          RidingRecordStatus @default(ONGOING)

  // distance, duration 등 부가 정보는 서버에서 계산하도록 함

  // 기본 정보
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("riding_record")
}

enum RidingRecordStatus {
  ONGOING
  COMPLETED
}

enum RidingEventType {
  SUDDEN_ACCELERATION
  SUDDEN_STOP
  ACCIDENT
}

model RidingEvent {
  id             String          @default(auto()) @id @map("_id") @db.ObjectId
  type           RidingEventType
  timestamp      DateTime
  location       GeoPoint?
  userId         String          @map("user_id")
  ridingRecordId String?         @map("riding_record_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}
