name: Build & Push Docker Image, Deploy to Home Server

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build-docker-image-and-push:
    name: Build and Push to Docker Hub
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, largeserver]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # QEMU 설정 (다른 아키텍처 에뮬레이션)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Docker Buildx 빌더 설정
      # multi-arch를 지원하는 드라이버로 자동 전환
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드 및 푸시
      # 위에서 작성한 Dockerfile을 사용하여 이미지를 빌드하고 태깅하여 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: scripts/docker/dockerfile # Dockerfile path
          push: true # 빌드 후 푸시 실행
          tags: ${{secrets.DOCKER_IMAGE_NAME_WITH_TAG}} # version은 latest로 우선 고정
          platforms: linux/amd64,linux/arm64

  docker-pull-and-run:
    name: Pull Latest Docker Image and Run on Home Server
    needs: build-docker-image-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH 접속 및 스크립트 실행
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            echo "[1] docker가 설치되어 있는지 확인합니다."
            if which docker > /dev/null 2>&1; then
              echo "✅ docker가 정상적으로 인식됩니다: $(which docker)"
            else
              echo "❌ docker를 PATH에서 찾을 수 없습니다. PATH를 등록합니다."
              export PATH="$PATH:/usr/local/bin"
              if which docker > /dev/null 2>&1; then
                echo "✅ PATH 등록 후 docker 인식됨: $(which docker)"
              else
                echo "❌ 여전히 docker를 찾을 수 없습니다. docker가 설치되어 있는지 또는 설치 경로를 확인하세요."
                exit 1
              fi
            fi

            echo "=============================="
            echo "📦 최신 Docker 이미지 Pull 시작"
            echo "=============================="

            docker pull ${{secrets.DOCKER_IMAGE_NAME_WITH_TAG}}

            echo "✅ Docker 이미지 Pull 완료"

            echo "=============================="
            echo "🧹 기존 컨테이너 정리 시작"
            echo "=============================="
            docker stop ${{secrets.SERVER_DOCKER_CONATINER_NAME}} || true
            docker rm ${{secrets.SERVER_DOCKER_CONATINER_NAME}} || true
            echo "✅ 기존 컨테이너 정리 완료"

            echo "=============================="
            echo "💪 env 파일 path로 이동"
            echo "=============================="
            echo "🫶 이동 전 디렉토리: $(pwd)"
            cd ${{ secrets.SERVER_APP_DIRECTORY }}
            echo "✅ 현재 디렉토리: $(pwd)"

            echo "💪 Creating .env files"
            echo "${{ secrets.DOTENV_DEVELOPMENT }}" | awk 'NF' > .env
            echo "${{ secrets.DOTENV_DEFAULT }}" | awk 'NF' >> .env
            echo "✅ .env files created"

            echo "=============================="
            echo "🚀 새 컨테이너 실행 시작"
            echo "=============================="
            docker run \
              -d \
              -p ${{secrets.SERVER_APP_PORT}}:7777 \
              --name ${{secrets.SERVER_DOCKER_CONATINER_NAME}} \
              --restart always \
              --env-file .env \
              ${{secrets.DOCKER_IMAGE_NAME_WITH_TAG}}

            echo "✅ 새 컨테이너 실행 완료"

            docker logs ${{secrets.SERVER_DOCKER_CONATINER_NAME}} --timestamps --tail 100

            echo "=============================="
            echo "🎉 전체 프로세스 완료"
            echo "=============================="
